"use client";
import ArrowLeftIconImage from "@/assets/icons/arrow-left.svg";
import { BookInfo } from '@/entities/BookInfo';
import { Params, ParamType } from "@/utils/Params";
import { ThrowByResponse } from '@/utils/ThrowByResponse';
import { useQuery } from '@tanstack/react-query';
import Image from 'next/image';
import { useRouter, useSearchParams } from "next/navigation";

export default function References() {
  const searchParams = useSearchParams();
  const router = useRouter()

  const [bookAbbr] = Params.getParamFromSearchParams(
    "book",
    searchParams,
    ParamType.STRING
  );
  const [versionAbbr] = Params.getParamFromSearchParams(
    "version",
    searchParams,
    ParamType.STRING
  );
  const [chapterNumber] = Params.getParamFromSearchParams(
    "chapter",
    searchParams,
    ParamType.NUMBER
  );
  const [verseNumber] = Params.getParamFromSearchParams(
    "verse",
    searchParams,
    ParamType.NUMBER
  );

  const { data: books, isLoading: isLoadingBooks } = useQuery({
    queryKey: ["books"],
    queryFn: async () => {
      const booksResponse = await fetch("/api/books");

      await ThrowByResponse.throwsIfNotOk(booksResponse);

      const booksData = await booksResponse.json();

      return booksData as BookInfo[];
    },
  });

  function handlePrevious() {
    router.back()
  }

  const book = books?.find(({ abbr }) => abbr.toLowerCase() === bookAbbr?.toLowerCase());

  const bookNameDisplay = book?.name ?? "...";
  const verseNumberDisplay = `Verse ${verseNumber ?? "..."}`


  return (
    <div className="flex min-h-screen flex-col px-7 py-7 pb-15 bg-[#f4ece8]">
      <div className="select-none fixed top-0 left-0 w-full bg-[#f4ece8] border-b border-gray-300 p-6 py-2 z-10 shadow animate-show-from-top">
        <div className="flex items-center">
          <div className="flex flex-col">
            <h1 className="text-2xl font-bold">
              {book?.name || "..."}
            </h1>
            <h2 className="text-sm font-bold opacity-70">
              {chapterNumber ? `Chapter ${chapterNumber}` : "..."}
            </h2>
            <h3 className="text-xs font-bold opacity-50">
              {verseNumber ? `Verse ${verseNumber}` : "..."}
            </h3>
          </div>
          <div className="flex ml-auto">
            <button
              onClick={handlePrevious}
              className="cursor-pointer ml-4 mt-1 p-2 rounded-md hover:bg-gray-300 opacity-80"
            >
              <Image
                width={30}
                height={30}
                src={ArrowLeftIconImage}
                alt="Image return to reader"
              />
            </button>
          </div>
        </div>
      </div>
      <hr className="mt-18 opacity-0" />

      {/* Loading verses
      {isLoadingVerseVersions && (
        <div className="flex flex-col gap-2">
          {Array.from({ length: 5 }).map((_, i) => (
            <div key={i} className="flex flex-col gap-1">
              <div className="w-10/12 h-6 rounded-sm bg-slate-700/30 animate-pulse mb-1" />
              <div className="w-full h-6 rounded-sm bg-slate-700/30 animate-pulse mb-1" />
              <div className="w-3/6 h-6 rounded-sm bg-slate-700/30 animate-pulse mb-1" />
              <div className="w-5/6 h-6 rounded-sm bg-slate-700/30 animate-pulse mb-1" />
              <div className="w-2/6 h-6 rounded-sm bg-slate-700/30 animate-pulse mb-1" />
            </div>
          ))}
        </div>
      )}

      {verseVersions?.map((verse, index) => (
        <div
          key={index}
          id={(index + 1).toString()}
          className="cursor-cell mt-3 text-lg hover:bg-gray-300 select-none rounded-md px-1 py-[2px] hide-buttons border-b border-b-gray-400 border-dashed"
        >
          <h2 className="text-xl font-medium italic">{verse.version}</h2>
          <sup className="font-bold border rounded-sm px-[2px]  border-dashed border-gray-400">
            {verse.book.name} {verse.book.chapter.number}:{verseNumber}
          </sup>
          <br />
          {verse.book.chapter.verses.at(0) || "..."}
        </div>
      ))} */}
    </div>
  )
}
